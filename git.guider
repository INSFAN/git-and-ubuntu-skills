创建版本库
mkdir insfan-git                      创建git版本库目录
git init                              把这个目录变成Git可以管理的仓库
git add readme.txt                    把文件添加到仓库，把文件修改添加到暂存区
git commit -m "wrote a readme file"   把文件提交到仓库,把暂存区的所有内容提交到当前分支-m后面输入的是本次提交的说明

**********************************************************************************
版本回退
git status                            可以让我们时刻掌握仓库当前的状态
git diff readme.txt                   查看修改的内容,工作区和版本库的差别
git log                               查看从最近到最远的提交日志信息
git log --pretty=oneline              简版的提交日志信息
git reset --hard HEAD^                回退到上一个版本，HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示上上一个版本
git reset --hard commit_id            回退到指定的commit_id版本
git reflogb                           记录你的每一次命令

************************************************************************************
工作区和暂存区
工作区（working directory):           在自己电脑里面能看到的目录，比如insfan-git文件夹就是一个工作区。
版本库（Repository）:                 .git
暂存区（stage）:                      把文件修改添加到暂存区，版本库中git add 命令后文件保存的位置。
master分支：                          把暂存区的所有内容提交到当前分支，版本库中git commit命令后文件保存的位置，指针HEAD来指向不同的版本
git checkout -- readme.txt            把readme.txt文件在工作区的修改全部撤销,总之，就是让这个文件回到最近一次git commit或git add时的状态
git reset HEAD readme.txt             把暂存区的修改退回到工作区
git rm test.txt                       从版本库中删除test.txt
git checkout --test.txt               从版本库中恢复test.txt到工作区

*************************************************************************************
远程仓库
git remote add origin https://github.com/INSFAN/insfan-git.git   本地仓库与github中的insfan-git仓库关联
git push -u origin master                                        把本地仓库的内容推送到GitHub仓库，由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以不使用-u
git clone git@github.com:INSFAN/git-skills.git                   克隆一个本地库
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快

***************************************************************************************
创建与合并分支
git checkout -b dev                              创建dev分支并切换到dev分支
git branch dev                                   创建dev分支                  
git checkout dev                                 切换到dev分支
git branch                                       查看当前分支,命令会列出所有分支，当前分支前面会标一个*号
git merge dev                                    合并dev分支到当前分支，默认使用fast-forward模式合并
git branch -d dev                                删除dev分支
git log --graph                                  命令可以看到分支合并图。 
git log --graph --pretty=oneline --abbrev-commit   
git merge --no-ff -m "merge with no-ff" dev      合并dev分支，请注意--no-ff参数，表示禁用Fast forward。因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并
解决冲突合并
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
分支管理策略
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
在实际开发中，我们应该按照几个基本原则进行分支管理：首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
bug分支
git stash                          可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list                     查看存储的工作现场
git stash apply                    恢复工作现场，stash内容并不删除，你需要用git stash drop来删除
git stash drop                     删除stash内容
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
Feature分支
软件开发中，总有无穷无尽的新的功能要不断添加进来。
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
git branch -D feature-vulcan       丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除
多人协作
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
git remote                         查看远程库的信息
git -v remote                      显示远程库详细信息
推送(push)分支
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
抓取(fetch)分支
多人协作时，大家都会往master和dev分支上推送各自的修改
git checkout -b dev origin/dev             小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是用这个命令创建本地dev分支
git branch --set-upstream-to=origin/dev dev 指定本地dev分支与远程origin/dev分支的链接
git fetch                                   从一个或多个其他存储库中获取分支和/或标签(统称为“引用”)以及完成其历史所必需的对象。远程跟踪分支已更新(Git术语叫做commit)，需要将这些更新取回本地，这时就要用到git fetch命令
git fetch                                   更新所有分支，全部取回本地
git fetch origin master                     更新origin的master分支，所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master分支，就可以用origin/master读取
git pull = git fetch + git merge            把最新的提交从origin/dev抓下来，然后，在本地合并
多人协作的工作模式通常是这样：
1.首先，可以试图用git push origin <branch-name>推送自己的修改；
2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3.如果合并有冲突，则解决冲突，并在本地提交；
4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令 git branch --set-upstream-to=origin/<branch> dev
git rebase                        分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改
rebase操作可以把本地未push的分叉提交历史整理成直线,rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比

*********************************************************************************************************
标签管理
在Git中打标签非常简单，首先，切换到需要打标签的分支上
git tag v1.0                                        给最新的commit打上标签
git tag                                             查看所有标签，标签不是按时间顺序列出，而是按字母排序的
git tag v0.5 commit_id                              给过去的commit打上标签
git tag -a v0.1 -m "version 0.1 released" 1094adb   创建带有说明的标签，-a指定标签名，-m说明文字
git show v1.0                                       查看标签信息
git tag -d v1.0                                     删除本地v1.0b标签
标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签
git push origin v1.0                                推送某个本地标签到远程
git push origin --tags                              一次性推送全部尚未推送到远程的本地标签
git push origin :refs/tags/v0.9                     远程删除标签，需要先从本地删除

**************************************************************************************************************
Fork开源仓库
1.Fork
2.从自己账号clone到本地修改
3.可以推送pull request给官方仓库来贡献代码

************************************************************************************************************
忽略特殊文件
忽略文件的原则是：
1.忽略操作系统自动生成的文件，比如缩略图等；
2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
3.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
忽略某些文件时，需要编写.gitignore
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用










